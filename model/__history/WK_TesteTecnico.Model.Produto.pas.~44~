unit WK_TesteTecnico.Model.Produto;

interface

uses
  WK_TesteTecnico.Model.Interfaces;

type
  TModelProduto = class(TInterfacedObject, iModelProduto)
    private
      FDescricao: String;
      FPrecoVenda: Double;
      FCodigo: Integer;
    public
      constructor Create();
      destructor Destroy; override;
      function BuscarProduto(value: Integer): TModelProduto;
      property Codigo: Integer read FCodigo write FCodigo;
      property Descricao: String read FDescricao write FDescricao;
      property PrecoVenda: Double read FPrecoVenda write FPrecoVenda;
      function InserirItemPedido: iModelProduto;
  end;

implementation

uses
  WK_TesteTecnico.Model.DM, System.SysUtils;
{ TModelProduto }

function TModelProduto.BuscarProduto(value: Integer): TModelProduto;
var
  produto : TModelProduto;
begin
  try
    produto := TModelProduto.Create;
    produto.FCodigo := value;
    produto.FDescricao := DM.FDConnection.ExecSQLScalar(
      'SELECT PROD_DESCRICAO FROM PRODUTO WHERE PROD_CODIGO = :CODIGO'
      ,[produto.FCodigo]);
    produto.FPrecoVenda := DM.FDConnection.ExecSQLScalar(
      'SELECT PROD_PRECO_VENDA FROM PRODUTO WHERE PROD_CODIGO = :CODIGO'
      ,[produto.FCodigo]);
    Result := produto;
  except
    raise Exception.Create('Erro ao buscar Produto.');
  end;
end;

function TModelProduto.Codigo(Value: Integer): iModelProduto;
begin
  Result := Self;
  FCodigo := Value;
end;

constructor TModelProduto.Create(Parent: iModelPedido);
begin
  FParent := Parent;
end;

destructor TModelProduto.Destroy;
begin

  inherited;
end;

class function TModelProduto.New(Parent: iModelPedido): iModelProduto;
begin
  Result := Self.Create(Parent);
end;

function TModelProduto.&End: iModelPedido;
begin
  Result := FParent;
end;

function TModelProduto.InserirItemPedido: iModelProduto;
begin
  Result := Self;
end;

end.
